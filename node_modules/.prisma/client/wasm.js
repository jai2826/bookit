
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ExperienceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  about: 'about',
  description: 'description',
  price: 'price',
  duration: 'duration',
  imageUrl: 'imageUrl',
  location: 'location',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SlotScalarFieldEnum = {
  id: 'id',
  experienceId: 'experienceId',
  dateTime: 'dateTime',
  capacity: 'capacity',
  bookedCount: 'bookedCount',
  isSoldOut: 'isSoldOut'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  slotId: 'slotId',
  quantity: 'quantity',
  userName: 'userName',
  userEmail: 'userEmail',
  userPhone: 'userPhone',
  promoCodeId: 'promoCodeId',
  originalPrice: 'originalPrice',
  finalPrice: 'finalPrice',
  status: 'status',
  bookingDate: 'bookingDate'
};

exports.Prisma.PromoCodeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  discountType: 'discountType',
  discountValue: 'discountValue',
  isActive: 'isActive',
  validUntil: 'validUntil'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.BookingStatus = exports.$Enums.BookingStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.DiscountType = exports.$Enums.DiscountType = {
  PERCENTAGE: 'PERCENTAGE',
  FLAT_AMOUNT: 'FLAT_AMOUNT'
};

exports.Prisma.ModelName = {
  Experience: 'Experience',
  Slot: 'Slot',
  Booking: 'Booking',
  PromoCode: 'PromoCode'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "E:\\Work\\internshalaprojects\\bookit\\node_modules\\@prisma\\client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "windows",
        "native": true
      },
      {
        "fromEnvVar": null,
        "value": "rhel-openssl-3.0.x"
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "E:\\Work\\internshalaprojects\\bookit\\prisma\\schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.18.0",
  "engineVersion": "34b5a692b7bd79939a9a2c3ef97d816e749cda2f",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "postgresql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// You can use 'postgresql', 'mysql', or 'mongodb' as per the assignment options.\n// I'll use PostgreSQL as a common example.\ndatasource db {\n  provider = \"postgresql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider      = \"prisma-client-js\"\n  binaryTargets = [\"native\", \"rhel-openssl-3.0.x\"]\n}\n\n// --- CORE MODELS ---\n\n// Model for the main travel experiences (GET /experiences).\nmodel Experience {\n  id          String   @id @default(cuid())\n  name        String   @unique\n  about       String\n  description String\n  price       Decimal  @default(0.00) @db.Decimal(10, 2)\n  duration    String? // e.g., \"3 hours\", \"Full Day\"\n  imageUrl    String? // For the royalty-free images\n  location    String?\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  slots Slot[] // Relation to available slots\n}\n\n// Model for available dates and time slots (GET /experiences/:id).\nmodel Slot {\n  id           String     @id @default(cuid())\n  experienceId String\n  experience   Experience @relation(fields: [experienceId], references: [id])\n  dateTime     DateTime\n  capacity     Int        @default(1)\n  bookedCount  Int        @default(0)\n  isSoldOut    Boolean    @default(false) // For clear feedback\n\n  bookings Booking[]\n\n  @@unique([experienceId, dateTime])\n  @@index([experienceId])\n  @@index([dateTime])\n}\n\n// Model for user bookings (POST /bookings).\nmodel Booking {\n  id        String  @id @default(cuid())\n  slotId    String\n  slot      Slot    @relation(fields: [slotId], references: [id])\n  quantity  Int     @default(1)\n  // Minimal form validation fields\n  userName  String\n  userEmail String\n  userPhone String?\n\n  // Price & Promo\n  promoCodeId   String?\n  promoCode     PromoCode? @relation(fields: [promoCodeId], references: [id])\n  originalPrice Decimal    @db.Decimal(10, 2)\n  finalPrice    Decimal    @db.Decimal(10, 2)\n\n  // Status & Date\n  status      BookingStatus @default(PENDING) // Confirmation or failure message\n  bookingDate DateTime      @default(now())\n\n  // Constraint to help prevent double-booking for the *same* booking record (but logic should be in the service layer)\n  @@index([slotId, userEmail])\n}\n\n// Model for Promo Codes (POST /promo/validate).\nmodel PromoCode {\n  id            String       @id @default(cuid())\n  code          String       @unique // e.g., SAVE10, FLAT100\n  discountType  DiscountType\n  discountValue Decimal      @db.Decimal(10, 2)\n  isActive      Boolean      @default(true)\n  validUntil    DateTime?\n\n  bookings Booking[]\n}\n\n// --- ENUMS ---\n\nenum BookingStatus {\n  PENDING\n  CONFIRMED\n  FAILED\n  CANCELLED\n}\n\nenum DiscountType {\n  PERCENTAGE // e.g., 10% off\n  FLAT_AMOUNT // e.g., $100 off\n}\n",
  "inlineSchemaHash": "d75ffdde6ee652cdd44fc207a51503acff850423bdf6b31ffa9da76493795370",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"Experience\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"about\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"duration\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"location\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"slots\",\"kind\":\"object\",\"type\":\"Slot\",\"relationName\":\"ExperienceToSlot\"}],\"dbName\":null},\"Slot\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"experienceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"experience\",\"kind\":\"object\",\"type\":\"Experience\",\"relationName\":\"ExperienceToSlot\"},{\"name\":\"dateTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"capacity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"bookedCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"isSoldOut\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"bookings\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToSlot\"}],\"dbName\":null},\"Booking\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slotId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"slot\",\"kind\":\"object\",\"type\":\"Slot\",\"relationName\":\"BookingToSlot\"},{\"name\":\"quantity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"userName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userEmail\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userPhone\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"promoCodeId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"promoCode\",\"kind\":\"object\",\"type\":\"PromoCode\",\"relationName\":\"BookingToPromoCode\"},{\"name\":\"originalPrice\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"finalPrice\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"BookingStatus\"},{\"name\":\"bookingDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"PromoCode\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"discountType\",\"kind\":\"enum\",\"type\":\"DiscountType\"},{\"name\":\"discountValue\",\"kind\":\"scalar\",\"type\":\"Decimal\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"validUntil\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"bookings\",\"kind\":\"object\",\"type\":\"Booking\",\"relationName\":\"BookingToPromoCode\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

